import openai
import json
import random
import string

# Set API Key and custom API endpoint
openai.api_key = 'XXX'
openai.api_base = "XXX"  #your API key


class WeakPasswordGenerator:
    def __init__(self, university):
        # Save conversation context
        self.messages = [
            {"role": "system", "content": f"Honeywords are decoy passwords used to detect unauthorized access. "
                                          f"Please generate honeywords similar to the target password to safeguard the database security for {university}. "},
            {"role": "user",
             "content": "Common weak password patterns often include repeated characters, sequential numbers, or simple letter-number combinations."}
        ]

    def send_message_to_gpt(self, message):
        """
        Send a message to GPT and receive a reply, keeping the conversation context.
        """
        self.messages.append({"role": "user", "content": message})

        try:
            # Call GPT API
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=self.messages,
                max_tokens=300,  # Limit the number of generated tokens
                temperature=0.6
            )

            reply = response['choices'][0]['message']['content'].strip()
            self.messages.append({"role": "assistant", "content": reply})

            return reply

        except Exception as e:
            print(f"Error calling GPT API: {str(e)}")
            return None

    def generate(self, password):
        """
        Accept a password and generate honeywords with a similar structure.
        """
        # Step 1: Send instruction to mimic the structure of the password
        init_instruction = f"Generate honeywords that are structurally similar to the password '{password}', which is a weak password. These honeywords should follow common weak password patterns, such as simple character and number sequences, and slight rearrangements."
        self.send_message_to_gpt(init_instruction)

        # Step 2: Provide the final instruction with constraints and ask for the result in JSON format
        final_instruction = (f"Ensure that the newly generated honeywords meet the following conditions: "
                             f"1. The length is between 6-18 characters; "
                             f"2. Contains at least two types of characters: uppercase letters, lowercase letters, and numbers; "
                             f"3. The new password cannot start with a number; "
                             f"4. Cannot contain special symbols other than letters and numbers. "
                             f"Generate 20 different honeywords from the given content, ensuring they are similar to the target password. Present the result **directly** in JSON format, with two fields: 'honeywords' (list of generated passwords) and 'explanation'.")

        # Generate honeywords using GPT
        honeywords_response = self.send_message_to_gpt(final_instruction)

        # Clean the returned data, removing Markdown code block markers
        if honeywords_response:
            honeywords_response = honeywords_response.replace("```json", "").replace("```", "").strip()

        # Try to parse the returned JSON data
        try:
            honeywords_result = json.loads(honeywords_response)
            return honeywords_result
        except json.JSONDecodeError:
            print(f"Returned data is not valid JSON: {honeywords_response}")
            print("Using backup method to generate honeywords.")
            # Use backup method to generate honeywords if GPT response is invalid
            return self.generate_honeywords_with_backup_method(password)

    def generate_honeywords_with_backup_method(self, password):
        """
        Backup method: Modify the last 1-3 characters of the original password to ensure generating 20 honeywords.
        """
        honeywords = []
        length = len(password)
        # Generate 20 honeywords
        for _ in range(20):
            # Randomly replace the last 1 to 3 characters
            num_replacements = random.randint(1, 3)  # Choose to replace 1 to 3 characters
            new_password = password[:-num_replacements] + ''.join(
                random.choices(string.ascii_letters + string.digits, k=num_replacements))
            honeywords.append(new_password)

        # Explanation for generated honeywords
        explanation = "These honeywords are generated by modifying the last 1-3 characters of the original password with random letters and numbers."

        # Return the generated honeywords and explanation
        return {"honeywords": honeywords, "explanation": explanation}


# Example usage
if __name__ == "__main__":
    generator = WeakPasswordGenerator("Peking University")
    password = "abc123xyz"
    result = generator.generate(password)

    if result:
        honeywords = result.get("honeywords", [])
        explanation = result.get("explanation", "")

        # Print honeywords in rows of 5
        for i in range(0, len(honeywords), 5):
            print(", ".join(honeywords[i:i + 5]))  # Print 5 honeywords per line

        # Print the explanation
        print(f"\nExplanation: {explanation}")
